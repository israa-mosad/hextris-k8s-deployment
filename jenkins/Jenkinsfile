pipeline {
    agent {
        kubernetes {
            inheritFrom 'default' // or your base pod template
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command:
    - cat
    tty: true
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent
  - name: terraform
    image: hashicorp/terraform:1.6.0
    command:
    - cat
    tty: true
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent
  - name: jnlp
    image: jenkins/inbound-agent:latest
    env:
    - name: JENKINS_SECRET
      value: "\${JENKINS_SECRET}"
    - name: JENKINS_TUNNEL
      value: "\${JENKINS_TUNNEL}"
    - name: JENKINS_AGENT_NAME
      value: "\${JENKINS_AGENT_NAME}"
    - name: JENKINS_AGENT_WORKDIR
      value: /home/jenkins/agent
    tty: true
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent
  volumes:
  - name: workspace-volume
    emptyDir: {}
"""
        }
    }

    environment {
        DOCKER_IMAGE = 'docker.io/israa2000/hextris:latest'
        DOCKER_CRED_ID = 'docker-hub' // Jenkins credential ID (username/password)
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                container('kaniko') {
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_CRED_ID,
                                                     usernameVariable: 'DOCKER_USER',
                                                     passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                        mkdir -p /kaniko/.docker
                        cat > /kaniko/.docker/config.json <<EOF
{
  "auths": {
    "https://index.docker.io/v1/": {
      "username": "${DOCKER_USER}",
      "password": "${DOCKER_PASS}"
    }
  }
}
EOF
                        /kaniko/executor \
                          --dockerfile=\$WORKSPACE/Dockerfile \
                          --context=dir://\$WORKSPACE \
                          --destination=${DOCKER_IMAGE} \
                          --cache=true
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                container('terraform') {
                    sh """
                    terraform init
                    terraform apply -auto-approve
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Check logs for details."
        }
    }
}
