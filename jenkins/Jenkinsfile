pipeline {
    agent {
        kubernetes {
            label 'hextris-pipeline'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /home/jenkins/agent
      name: workspace-volume
  - name: terraform
    image: hashicorp/terraform:1.6.7
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /home/jenkins/agent
      name: workspace-volume
  volumes:
  - name: workspace-volume
    emptyDir: {}
"""
        }
    }

    environment {
        DOCKER_IMAGE = "docker.io/israa2000/hextris:latest"
        KUBE_NAMESPACE = "jenkins-assignment"
    }

    stages {

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                container('kaniko') {
                    withCredentials([string(credentialsId: 'docker-config-json', variable: 'DOCKER_CONFIG_JSON')]) {
                        sh '''
                        mkdir -p /kaniko/.docker
                        echo $DOCKER_CONFIG_JSON > /kaniko/.docker/config.json
                        /kaniko/executor \
                            --dockerfile=$WORKSPACE/Dockerfile \
                            --context=dir://$WORKSPACE \
                            --destination=$DOCKER_IMAGE \
                            --cache=true
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                container('terraform') {
                    sh '''
                    # Initialize Terraform
                    terraform init

                    # Apply Kubernetes configuration
                    terraform apply -auto-approve

                    # Deploy Helm chart
                    helm upgrade --install hextris ./helm/hextris \
                        --namespace $KUBE_NAMESPACE
                    '''
                }
            }
        }

    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
